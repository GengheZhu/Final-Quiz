
import java.util.*;

/**
 * Rishab Singh APCS P.6
 *                  100 Integers        200 Integers        400 Integers        800 Integers
 * Bubble           24422               100460              403088              1602636
 * 
 * Selection        15246               60496               240996              961996                             
 * 
 * Insertion        5154                19348               87174               331438               
 * 
 * Observations
  * I noticed that the number of steps would quadruple for each of these three sorting algorithms,
  * probably because these are quadratic algorithms and the number of integers doubled each time.
  * The bubble sort was the least efficient and the insertion was the most efficient.
 */
public class SinghRishab06{
  private long steps;
  /**
   *  Description of Constructor
   *
   * @param  list  Description of Parameter
   */
  public SinghRishab06(){
    steps = 0;
  }

  /**
   *  Description of the Method
   *
   * @param  list  reference to an array of integers to be sorted
   */
  public void bubbleSort(ArrayList <Comparable> list){
  steps = 0;
  for (int outer = 0; outer < list.size() - 1; outer++){
    for (int inner = 0; inner < list.size()-outer-1; inner++){
        steps += 3;//count one compare and 2 gets
        if (list.get(inner).compareTo(list.get(inner + 1)) > 0){
           steps += 4;//count 2 gets and 2 sets
           Comparable temp = list.get(inner);
           list.set(inner,list.get(inner + 1));
           list.set(inner + 1,temp);
        }
    }
  }
 System.out.println();
 System.out.println("Bubble Sort");
 System.out.println();
  }

  /**
   *  Description of the Method
   *
   * @param  list  reference to an array of integers to be sorted
   */
  public void selectionSort(ArrayList <Comparable> list){
   int min;
   Comparable temp;

   steps = 0;
   for (int outer = 0; outer < list.size() - 1; outer++){
    min = outer;
    for (int inner = outer + 1; inner < list.size(); inner++){
        steps += 3;
      if (list.get(inner).compareTo(list.get(min)) < 0) {
        min = inner; // a new smallest item is found
      }
    }
    //swap list[outer] & list[min]
    steps += 4;
    temp = list.get(outer);
    list.set(outer, list.get(min));
    list.set(min, temp);
  }
  System.out.println();
  System.out.println("Selection Sort");
  System.out.println();
  }

  /**
   *  Description of the Method
   *
   * @param  list  reference to an array of integers to be sorted
   */
  public void insertionSort(ArrayList <Comparable> list){
      steps = 0;
  for (int outer = 1; outer < list.size(); outer++){
    int position = outer;
    steps += 1;
    Comparable key = list.get(position);

    // Shift larger values to the right
    while (position > 0 && list.get(position - 1).compareTo(key) > 0){
        steps += 4;
      list.set(position, list.get(position - 1));
      position--;
    }
    steps += 3;
    list.set(position, key);
  }
 System.out.println();
 System.out.println("Insertion Sort");
 System.out.println();
  }
 
  /**
   *  Accessor method to return the current value of steps
   *
   */
  public long getStepCount(){
    return steps;
  }

  /**
   *  Modifier method to set or reset the step count. Usually called
   *  prior to invocation of a sort method.
   *
   * @param  stepCount   value assigned to steps
   */
  public void setStepCount(long stepCount){
    steps = stepCount;
  }
}

